{ config, pkgs, lib, ... }:

let
  inherit (lib) mkOption types;
  inherit (lib.strings) optionalString;
  inherit (lib.lists) zipListsWith;
  inherit (builtins) map concatStringsSep head tail;

  cfg = config.modules.graphics.monitor;
  xrandrBin = "${pkgs.xorg.xrandr}/bin/xrandr";

  resolutionSubmodule = types.submodule ({ ... }: {
    options = {
      width = mkOption {
        type = with types; int;
        description = "Width of the monitor";
      };

      height = mkOption {
        type = with types; int;
        description = "Height of the monitor";
      };
    };
  });

  layoutSubmodule = types.submodule ({ ... }: {
    options = {
      identifier = mkOption {
        type = with types; str;
        description = "Xrandr monitor identifier";
      };

      resolution = mkOption {
        type = resolutionSubmodule;
        description = "Monitor resolution";
      };

      hz = mkOption {
        type = with types; int;
        default = 60;
        description = "Monitor refresh rate";
      };
    };
  });

  mkOutput = head: prevHead: ''
    --output ${head.identifier} \
    --mode "nixos-autogenerated" \
    ${optionalString (prevHead != null) "--right-of ${prevHead.identifier}"} \
  '';

  mkOutputsCmd = layout: dpi: ''
    ${xrandrBin} --dpi ${toString dpi} ${
      concatStringsSep "" ([ (mkOutput (head layout) null) ] ++ (zipListsWith mkOutput (tail layout) layout))
    }
  '';

  mkModeCmd = head: ''
    mode=$(${pkgs.libxcvt}/bin/cvt ${toString head.resolution.width} ${toString head.resolution.height} ${toString head.hz} | tail -n 1 | cut -d' ' -f3-)
    ${xrandrBin} --newmode "nixos-autogenerated" $mode
    ${xrandrBin} --addmode "${head.identifier}" "nixos-autogenerated"
  '';

  mkModesCmd = layout: concatStringsSep "\n" (map mkModeCmd layout);

  # https://wiki.archlinux.org/title/Xrandr#Adding_undetected_resolutions
  mkCmd = layout: dpi: ''
    ${mkModesCmd layout}
    ${mkOutputsCmd layout dpi}
  '';
in
{
  options.modules.graphics.monitor = {
    layout = mkOption {
      type = with types; listOf layoutSubmodule;
      default = [ ];
      description = "Monitor configuration list";
    };

    dpi = mkOption {
      type = with types; int;
      default = 96;
      description = "Screen DPI";
    };
  };

  config = {
    system.events.onStartup = [
      (mkCmd cfg.layout cfg.dpi)
    ];
    services.xserver = {
      dpi = cfg.dpi;
      monitorSection = ''
        Option "DPI" "${toString cfg.dpi} x ${toString cfg.dpi}"
      '';
    };
    system.user.hm.xresources.properties = {
      "Xft.dpi" = cfg.dpi;
    };
  };
}
